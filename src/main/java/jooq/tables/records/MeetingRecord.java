/**
 * This class is generated by jOOQ
 */
package jooq.tables.records;


import javax.annotation.Generated;

import jooq.tables.Meeting;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeetingRecord extends UpdatableRecordImpl<MeetingRecord> implements Record4<Integer, String, String, String> {

	private static final long serialVersionUID = 712138885;

	/**
	 * Setter for <code>public.meeting.id</code>.
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.meeting.id</code>.
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.meeting.organizer</code>.
	 */
	public void setOrganizer(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.meeting.organizer</code>.
	 */
	public String getOrganizer() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>public.meeting.topic</code>.
	 */
	public void setTopic(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.meeting.topic</code>.
	 */
	public String getTopic() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>public.meeting.description</code>.
	 */
	public void setDescription(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>public.meeting.description</code>.
	 */
	public String getDescription() {
		return (String) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, String> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Meeting.MEETING.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Meeting.MEETING.ORGANIZER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Meeting.MEETING.TOPIC;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Meeting.MEETING.DESCRIPTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getOrganizer();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getTopic();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getDescription();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MeetingRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MeetingRecord value2(String value) {
		setOrganizer(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MeetingRecord value3(String value) {
		setTopic(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MeetingRecord value4(String value) {
		setDescription(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MeetingRecord values(Integer value1, String value2, String value3, String value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached MeetingRecord
	 */
	public MeetingRecord() {
		super(Meeting.MEETING);
	}

	/**
	 * Create a detached, initialised MeetingRecord
	 */
	public MeetingRecord(Integer id, String organizer, String topic, String description) {
		super(Meeting.MEETING);

		setValue(0, id);
		setValue(1, organizer);
		setValue(2, topic);
		setValue(3, description);
	}
}
